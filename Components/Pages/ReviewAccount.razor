@page "/reviewAccount"
@using Messenger
@using MessengerInterfaces
@using EmailService
@inject IMessengerService messengerService
@inject EmailService emailService
@rendermode InteractiveServer
@inherits AuthorizedPage

<PageTitle>Review Account</PageTitle>
<h1>Review Account</h1>
<p>@text</p>

@code {
	private string text;
	[Parameter]
	[SupplyParameterFromQuery(Name = "user")]
	public string userId { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "action")]
	public string action { get; set; }
	[Parameter]
	[SupplyParameterFromQuery(Name = "email")]
	public string email { get; set; }
	[Inject]
	NavigationManager navigationManager { get; set; }

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await this.Initialize(() => navigationManager.NavigateTo($"logout?redirectUrl=reviewAccount?user={userId}&action={action}&email={email}"));
			if (user is null)
			{
				navigationManager.NavigateTo("login");
				return;
			}
			if (!user.IsAdmin)
			{
				text = "No permission to view this page";
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(action))
			{
				text = "Invalid query";
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			Account account;
			Guid guid;
			try
			{
				guid = Guid.Parse(userId);
			}
			catch (FormatException ex)
			{
				text = ex.Message;
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			try
			{
				account = await messengerService.GetAccount(guid);
			}
			catch (Exception ex)
			{
				text = ex.Message;
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			if (!account.Locked)
			{
				text = "Account is not under review";
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			if (action == "accept")
			{
				account.Locked = false;
				await messengerService.EditAccountLock(guid, false, user.Id);
				if (!string.IsNullOrWhiteSpace(email))
				{
					emailService.Send(email, "Account request accepted", EmailService.GenerateAccountReviewEmail(true));
					emailService.Send(email, "Verify your email address", EmailService.GenerateVerificationEmail(guid, email));
				}
				text = "The account was unlocked succesfully!";
			}
			else if (action == "deny")
			{
				await messengerService.DeleteAccount(guid);
				if (!string.IsNullOrWhiteSpace(email))
				{
					emailService.Send(email, "Account request denied", EmailService.GenerateAccountReviewEmail(false));
				}
				text = "The account was deleted succesfully!";
			}
			else
			{
				text = "Invalid action";
			}
			await InvokeAsync(this.StateHasChanged);
		}
	}
}