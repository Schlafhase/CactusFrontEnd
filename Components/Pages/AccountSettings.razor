@page "/settings"
@rendermode InteractiveServer
@using EmailService
@using System.Text.RegularExpressions
@inherits AuthorizedPage
@inject NavigationManager navigationManager
@inject EmailService emailService

<ModalDialog @ref="_dialog"
			 OverlayBackgroundColor="black"
			 OverlayOpacity="0.5"
			 CloseOnOverlayClick="true"
			 CloseOnEscapeKey="true"
			 ShowCloseButton="false"
			 Width="500">
	<Header>
		<h4>@(string.IsNullOrWhiteSpace(user.Email) ? "Add Email Address" : "Change Email Address")</h4>
	</Header>
	<Content>
		Enter your email address: <input class="form-control" @bind="email">
		<span class="errorSpan">@(invalidEmailAddress ? "Please provide a valid email address." : "")</span>
		<br />
		<button class="btn-cactus danger" @onclick="emailCancel">Cancel</button><button class="btn-cactus primary" style="float:right;" @onclick="emailAdd">@(string.IsNullOrWhiteSpace(user.Email) ? "Add Email" : "Change Email")</button>
	</Content>
</ModalDialog>

<ModalDialog @ref="_dialogPWChange"
			 OverlayBackgroundColor="black"
			 OverlayOpacity="0.5"
			 CloseOnOverlayClick="true"
			 CloseOnEscapeKey="true"
			 ShowCloseButton="false"
			 Width="500">
	<Header>
		<h4>Change Password</h4>
	</Header>
	<Content>
		Enter your current password: <input class="form-control" @bind="oldPassword">
		<span class="errorSpan">@(wrongPassword ? "Wrong Password" : "")</span>
		Enter your current password: <input class="form-control" @bind="oldPassword">
		<br />
		<button class="btn-cactus danger" @onclick="changePWCancel">Cancel</button><button class="btn-cactus primary" style="float:right;" @onclick="changePW">Change</button>
	</Content>
</ModalDialog>

<h1>Settings</h1>
<div class="settingSection" id="accountSettings">
<h2>Account</h2>
@if (user is not null)
{
	@if (!string.IsNullOrWhiteSpace(user.Email))
	{
		<b>Email: </b>

		@user.Email
		<br />
		<button class="btn-cactus" @onclick="addEmail">Change Email</button>
		<button class="btn-cactus danger" @onclick="removeEmail">Remove Email</button>
	}
	else
	{
		<button class="btn-cactus" @onclick="addEmail">Add Email</button>
	}
	<Alert Type="NotificationTypes.Success"
		@bind-IsVisible="emailAlertVisible"
		ShowCloseButton="false">
		<Content>
			An email with a verification link has been sent to your email address.
		</Content>
	</Alert>
	<br />
	<button class="btn-cactus" @onclick="@changePW">Change Password</button>
	<br />
}
else
{
	<p>Loading...</p>
}
</div>

<style>
	.bmodal-content {
		color: black;
	}

	button {
		margin: 10px 0;
	}

	.settingSection {
		background-color: #13011c;
		border-radius: 15px;
		padding: 10px;
		box-shadow: 0px 0px 15px magenta;
	}
</style>

@code {
	private string email = "";
	private string oldPassword = "";
	private string newPassword = "";
	private bool wrongPassword = false;
	private ModalDialog _dialog;
	private ModalDialog _dialogPWChange;
	private bool emailAlertVisible = false;
	private bool invalidEmailAddress = false;
	private Regex emailRegex = new(@"(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])");

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await this.Initialize(() => navigationManager.NavigateTo("logout?redirectUrl=settings"));
			if (user is null)
			{
				return;
			}
			await InvokeAsync(this.StateHasChanged);
		}
	}

	private async Task emailCancel()
	{
		await _dialog.Close();
		email = "";
		invalidEmailAddress = false;
		await InvokeAsync(this.StateHasChanged);
	}

	private async Task onChangePWButton()
	{
		await _dialogPWChange.Open();
	}

	private async Task changePWCancel()
	{
		await _dialogPWChange.Close();
		oldPassword = "";
		newPassword = "";
		wrongPassword = false;
	}

	private async Task changePW()
	{

	}

	private async Task emailAdd()
	{
		if (!string.IsNullOrWhiteSpace(email))
		{
			if (emailRegex.Matches(email)[0].Value == email)
			{
				EmailVerifyToken token = new(email, user.Id, DateTime.UtcNow);
				string tokenString = TokenVerification.GetTokenString(token);
				emailService.Send(email, "Verify your email address", $"<a href='https://cactusmessenger.azurewebsites.net/verifyEmail?token={tokenString}'>Verify</a>");
				emailAlertVisible = true;
				email = "";
				invalidEmailAddress = false;
				await InvokeAsync(this.StateHasChanged);
				await _dialog.Close();
				return;
			}
		}
		invalidEmailAddress = true;
		await InvokeAsync(this.StateHasChanged);
	}

	private async Task removeEmail()
	{
		await messengerService.EditAccountEmail(user.Id, "", user.Id);
		user.Email = "";
		await InvokeAsync(this.StateHasChanged);
	}

	private async Task addEmail()
	{
		emailAlertVisible = false;
		await _dialog.Open();
	}
}