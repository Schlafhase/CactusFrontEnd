@page "/channel/{channelIdAsString}/addUser"
@using CactusFrontEnd.Security
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer
@inject ProtectedLocalStorage ProtectedLocalStore
@inherits AuthorizedPage

<h3 style="word-break:break-word; overflow:hidden">@header</h3>
<span>Add users by their username </span>
<form @onsubmit="addUser">
	<input type="text" id="usernameInput" @bind-value=@userName/>
	<input type="submit" id="addUserButton" value="Add"/>
</form>
<span class="errorSpan">@addUserErrorMessage</span>
<p>Users:</p>
<ul>
	@foreach (var user in users)
	{
		<li>
			<span>@($"{user.UserName} ({user.Id}) ")</span><input type="button" value="Remove" @onclick=@(() => remove(user)) />
		</li>
	}
</ul>
<input type="button" value="Add users" @onclick=@addUsersClick />

@code {
	[Inject]
	IMessengerService messengerService { get; set; }
	[Inject]
	NavigationManager navigationManager { get; set; }
	[Parameter]
	public string ChannelIdAsString { get; set; }
	[Inject]
	EventService eventService { get; set; }
	ChannelDTO_Output channel;
	List<Account> users = [];
	string header = "Loading...";
	string userName;
	string errorMessage = string.Empty;
	string addUserErrorMessage = string.Empty;

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await this.Initialize(ProtectedLocalStore, () => navigationManager.NavigateTo($"logout?redirectUrl=channel/{ChannelIdAsString}/addUser"), messengerService);
			channel = await messengerService.GetChannel(Guid.Parse(ChannelIdAsString), this.signedToken.UserId);
			header = $"Add user to {channel.Name}";
			await InvokeAsync(this.StateHasChanged);
		}
	}

	private async Task addUser()
	{
		try
		{
			if (userName == "Deleted User")
			{
				throw new KeyNotFoundException();
			}
			Account user = await messengerService.GetAccountByUsername(userName);
			userName = "";
			if (users.Where(usr => usr.Id == user.Id).Count() > 0)
			{
				throw new ArgumentException("User already added");
			}
			users.Add(user);
			addUserErrorMessage = "";
		}
		catch (KeyNotFoundException)
		{
			addUserErrorMessage = "User not Found";
		}
		catch (ArgumentException ex)
		{
			addUserErrorMessage = ex.Message;
		}
		finally
		{
			this.StateHasChanged();
		}
	}

	private void remove(Account user)
	{
		if (user.Id != signedToken.UserId)
		{
			users.Remove(user);
			this.StateHasChanged();
		}
	}

	private async Task addUsersClick()
	{
		foreach (var user in users)
		{
			await messengerService.AddUserToChannel(user.Id, channel.Id, this.signedToken.UserId);
		}
		navigationManager.NavigateTo($"channel/{channel.Id}");
	}
}