@page "/createChannel"
@rendermode InteractiveServer
@using CactusFrontEnd.Components
@using CactusFrontEnd.Utils
@using CactusFrontEnd.Security
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inherits AuthorizedPage

<PageTitle>Create Channel</PageTitle>

<h1>Create Channel</h1>
<div id="userSelection">
	<span>Add users by their username </span>
	<form @onsubmit=@addUser>
		<input type="text" id="usernameInput" @bind-value=@userName />
		<input type="submit" id="addUserButton" value="Add" />
	</form>
	<span class="errorSpan">@addUserErrorMessage</span>
	<p>Users:</p>
	<ul>
		@foreach (var user in users)
		{
			<li>
				<span>@($"{user.UserName} ({user.Id}) ")</span><input type="button" value="Remove" @onclick=@(() => remove(user)) />
			</li>
		}
	</ul>
	<span>Name of the Channel:</span><br />
	<form @onsubmit=@create >
		<input type="text" @bind-value=@channelName />
		<input type="submit" value="Create" />
	</form>
	<span class="errorSpan">@errorMessage</span>
</div>

@code {
	[Inject]
	NavigationManager navigationManager { get; set; }
	[Inject]
	IMessengerService messengerService { get; set; }
	[Inject]
	EventService eventService { get; set; }
	List<Account> users = [];
	string userName;
	string channelName;
	string errorMessage = string.Empty;
	string addUserErrorMessage = string.Empty;

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await this.Initialize(() => navigationManager.NavigateTo($"logout?redirectUrl=createChannel"));
			if (signedToken is not null)
			{
				Account user = await messengerService.GetAccount(signedToken.Token.UserId);
				users.Add(user);
				this.StateHasChanged();
			}
		}
	}

	private async Task addUser()
	{
		try
		{
			if (userName == "Deleted User")
			{
				throw new KeyNotFoundException();
			}
			Account user = await messengerService.GetAccountByUsername(userName);
			userName = "";
			if (users.Where(usr => usr.Id == user.Id).Count() > 0)
			{
				throw new ArgumentException("User already added");
			}
			users.Add(user);
			addUserErrorMessage = "";
		}
		catch (KeyNotFoundException)
		{
			addUserErrorMessage = "User not Found";
		}
		catch (ArgumentException ex)
		{
			addUserErrorMessage = ex.Message;
		}
		finally
		{
			this.StateHasChanged();
		}
	}

	private void remove(Account user)
	{
		if (user.Id != signedToken.Token.UserId)
		{
			users.Remove(user);
			this.StateHasChanged();
		}
	}

	private async void create()
	{
		try
		{
			if (string.IsNullOrWhiteSpace(channelName))
			{
				throw new ArgumentException("Please provide a channel name.");
			}
			if (channelName.Length > 40)
			{
				throw new ArgumentException("Channel name can only be 40 characters long.");
			}
		}
		catch (ArgumentException ex)
		{
			errorMessage = ex.Message;
			this.StateHasChanged();
			return;
		}
		var channelId = await messengerService.CreateChannel(users.Select(usr => usr.Id).ToHashSet(), this.signedToken.Token.UserId, channelName);
		navigationManager.NavigateTo($"channel/{channelId.ToString()}");
	}
}