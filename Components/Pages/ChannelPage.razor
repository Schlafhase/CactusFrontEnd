@page "/channel/{channelIdAsString}"
@rendermode InteractiveServer
@implements IDisposable
@using CactusFrontEnd.Components.Layout
@using CactusFrontEnd.Utils
@using CactusFrontEnd.Security
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.RegularExpressions
@using System.Web
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IJSRuntime jsRuntime
@inherits AuthorizedPage

<PageTitle>@((channel is not null ? channel.Name : "Channel") + " - Cactus Messenger")</PageTitle>
<div class="chatContainer">
	<div class="chat">
		<div class="channelName">
			<h3>@header</h3>
			<p style="opacity: 0.5">@channelMembers</p>
		</div>
		<ul>
			@foreach ((int i, MessageDTO_Output message) in Utils.Enumerate(messages.ToList()))
			{
				<li class=@(message.AuthorId == user.Id ? "selfSentMessage message" : "message")>

					<ContextMenuTrigger id=@message.Id.ToString() MenuId=@(message.AuthorId == user.Id || user.IsAdmin ? "messageContextMenuWithDelete" : "messageContextMenu")>
						@if ((messages[i].AuthorId != (i + 1 > messages.Length - 1 ? Guid.Empty : messages[i + 1].AuthorId)) || messages[i].DateTime - (i + 1 > messages.Length - 1 ? DateTime.MinValue : messages[i + 1].DateTime) > TimeSpan.FromMinutes(2))
						{
							<span class="authorName">@message.AuthorName</span>
							@if (message.AuthorIsAdmin)
							{
								<span class="adminBadge" title="Admin/Developer"></span>
							}
							<span class="timestamp" title=@(message.DateTime.AddHours(timeZoneOffset).ToString())>@Utils.Relativize(message.DateTime.AddHours(timeZoneOffset), DateTime.UtcNow.AddHours(timeZoneOffset))</span>
							<br />
						}
						<div class="messageContent">
							<span class="messageContent">@((MarkupString)makeLinksClickable(message.Content))</span>
						</div>
						@if (getEmbedUrl(message.Content) is not null)
						{
							<iframe style="border-radius: 20px;" width="420" height="315"
									src=@getEmbedUrl(message.Content) allowfullscreen>
							</iframe>
						}
					</ContextMenuTrigger>
				</li>
			}
		</ul>
		<div id="messageInput">
			<form @onsubmit=@send>
				<input id="messageInputTextBox" autocomplete="off" type="text" @bind-value="messageContent" ><input type="submit" id="sendButton" value="Send" />
			</form>
		</div>
	</div>
</div>

<ContextMenu Id="messageContextMenu" Template="cactusTemplate">
	<Item OnClick=@copyMessageIdClick>Copy Id</Item>
</ContextMenu>
<ContextMenu Id="messageContextMenuWithDelete" Template="cactusTemplate">
	<Item OnClick=@deleteMessageClick>Delete Message</Item>
	<Item OnClick=@copyMessageIdClick>Copy Id</Item>
</ContextMenu>

<script>
	window.localDate = () => {
		var ldCurrentDate = new Date();
		return ldCurrentDate.getFullYear() +
			"-" + String(ldCurrentDate.getMonth() + 1).padStart(2, '0') +
			"-" + String(ldCurrentDate.getDate()).padStart(2, '0') +
			"T" +
			String(ldCurrentDate.getHours()).padStart(2, '0') +
			":" + String(ldCurrentDate.getMinutes()).padStart(2, '0') +
			":" + String(ldCurrentDate.getSeconds()).padStart(2, '0');
	};
	window.utcDate = () => {
		var ldCurrentDate = new Date();
		return ldCurrentDate.getUTCFullYear() +
			"-" + String(ldCurrentDate.getUTCMonth() + 1).padStart(2, '0') +
			"-" + String(ldCurrentDate.getUTCDate()).padStart(2, '0') +
			"T" +
			String(ldCurrentDate.getUTCHours()).padStart(2, '0') +
			":" + String(ldCurrentDate.getUTCMinutes()).padStart(2, '0') +
			":" + String(ldCurrentDate.getUTCSeconds()).padStart(2, '0');
	};
	window.timeZoneOffset = () => {
		return new Date().getTimezoneOffset() / 60;
	};
</script>

@code {
	[Parameter]
	public string ChannelIdAsString { get; set; }
	[Inject]
	IMessengerService messengerService { get; set; }
	[Inject]
	NavigationManager navigationManager { get; set; }
	MessageDTO_Output[] messages = [];
	List<string> messageDisplays = [];
	ChannelDTO_Output channel;
	string header = "Loading...";
	string channelMembers = "";
	string messageContent;
	string testString = "a";
	int timeZoneOffset;
	Action<ChannelDTO_Output> onMessageAction;
	ElementReference messageInput;
	Timer refreshTimeStampTimer;
	Regex youtubeRegex = new(@"https?://(www\.)?youtu(.be|be.com)/((watch(\?v=|/))|shorts/)?([A-Za-z0-9_]+)");
	Regex urlRegex = new(@"(https?://(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))");

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			timeZoneOffset = await jsRuntime.InvokeAsync<int>("timeZoneOffset");
			timeZoneOffset *= -1;
			var startTimeSpan = TimeSpan.Zero;
			var periodTimeSpan = TimeSpan.FromMinutes(1);

			refreshTimeStampTimer = new Timer(async (a) =>
			{
				await InvokeAsync(this.StateHasChanged);
			}, null, startTimeSpan, periodTimeSpan);

			onMessageAction = async channel =>
			{
				if (channel.Users.Contains(user.Id) || channel.Id == Guid.Parse(ChannelIdAsString))
				{
					await refresh();
				}
			};
			messengerService.OnMessage += onMessageAction;

			await this.Initialize(ProtectedLocalStore, () => navigationManager.NavigateTo($"logout?redirectUrl=channel/{ChannelIdAsString}"), messengerService);
			if (this.signedToken is null)
			{
				return;
			}
			try
			{
				channel = await messengerService.GetChannel(Guid.Parse(ChannelIdAsString), user.Id);
				channelMembers = string.Join(", ", channel.UserNames);
				header = channel.Name ?? channelMembers;
				this.StateHasChanged();
			}
			catch (UnauthorizedAccessException)
			{
				navigationManager.NavigateTo("Error/Unauthorized");
				return;
			}
			catch (Exception ex)
			{
				if (ex is KeyNotFoundException || ex is FormatException)
				{
					navigationManager.NavigateTo("Error/NotFound");
				}
				else
				{
					throw;
				}
				return;
			}
			await refresh();
		}
	}

	private async Task send()
	{
		if (!string.IsNullOrWhiteSpace(messageContent))
		{
			Message msg = new(Guid.NewGuid(), messageContent, DateTime.UtcNow, user.Id, channel.Id);
			messageContent = "";
			await messengerService.PostMessage(msg, user.Id);
		}
	}

	private async Task refresh()
	{
		try
		{
			messages = await messengerService.GetAllMessagesInChannel(channel.Id, user.Id);
			messages = messages.OrderByDescending(o => o.DateTime).ToArray();
			await InvokeAsync(this.StateHasChanged);
		}
		catch { }
	}

	public void Dispose()
	{
		messengerService.OnMessage -= onMessageAction;
		refreshTimeStampTimer?.Dispose();
	}

	private async Task deleteMessageClick(ItemClickEventArgs e)
	{
		string messageId = e.ContextMenuTrigger.Id;
		await messengerService.DeleteMessage(Guid.Parse(messageId), user.Id);
	}

	private async void copyMessageIdClick(ItemClickEventArgs e)
	{
		await jsRuntime.InvokeVoidAsync($"navigator.clipboard.writeText", e.ContextMenuTrigger.Id);
	}

	private string? getEmbedUrl(string message)
	{
		var youtubeMatch = youtubeRegex.Matches(message);
		if (youtubeMatch.Count == 0)
		{
			return null;
		}
		else
		{
			return $"https://youtube.com/embed/{youtubeMatch[0].Groups[6].Value}?wmode=transparent";
		}
	}

	private string makeLinksClickable(string message)
	{

		string newMessage = urlRegex.Replace(HttpUtility.HtmlEncode(message), $"<a href=\"{@"$0"}\">{@"$0"}</a>");
		return newMessage;
	}
}