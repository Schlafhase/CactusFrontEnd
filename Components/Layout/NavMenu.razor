@using CactusFrontEnd.Security
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer
@inject ProtectedLocalStorage ProtectedLocalStore
@implements IDisposable
@inherits AuthorizedPage

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<p class="navbar-brand">Channels</p>
	</div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	<nav class="flex-column">
		@if (!loggedIn)
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link" href="login">
					<div class="navLink">
						<span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
					</div>
				</NavLink>
			</div>
		}
		else
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link" href="createChannel">
					<div class="navLink">
						<span class="bi bi-plus-nav-menu" aria-hidden="true"></span> Create New
					</div>
				</NavLink>
			</div>
			<div class="nav-item px-3">
				<NavLink class="nav-link" href="channel/00000000-0000-0000-0000-000000000005">
					<div class="navLink">
						<span class="bi bi-global-nav-menu" aria-hidden="true"></span> Global Channel
					</div>
				</NavLink>
			</div>
			@foreach (var channel in channels)
			{
				<ContextMenuTrigger id=@channel.Id.ToString() MenuId="channelContextMenu">
					<div class="nav-item px-3">
						<NavLink class="nav-link" href=@($"channel/{channel.Id}")>
							<div class="navLink">
								<span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span>@(channel.Name ?? string.Join(", ", channel.UserNames))
							</div>
						</NavLink>
					</div>
				</ContextMenuTrigger>
			}
		}
	</nav>
</div>

<ContextMenu Id="channelContextMenu" Template="cactusTemplate">
	<Item OnClick=@leaveChannelClick>Leave Channel</Item>
	<Item OnClick=@addUserClick>Add user</Item>
</ContextMenu>

@code {
	[Inject]
	NavigationManager navigationManager { get; set; }
	[Inject]
	IMessengerService messengerService { get; set; }
	[Inject]
	private EventService eventService { get; set; }
	ChannelDTO_Output[] channels = [];
	Action tokenChangeAction;
	bool loggedIn;

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			loggedIn = true;
			await this.Initialize(ProtectedLocalStore, () => loggedIn = false, messengerService);
			tokenChangeAction = async () =>
			{
				await refresh();
			};
			eventService.OnTokenChange += tokenChangeAction;
			eventService.OnChannelListChange += tokenChangeAction;
			if (this.signedToken is null)
			{
				return;
			}
			await refresh();
		}
	}

	private async Task refresh()
	{
		ProtectedBrowserStorageResult<string> result;
		try
		{
			result = await ProtectedLocalStore.GetAsync<string>("AuthorizationToken");
		}
		catch (InvalidOperationException)
		{
			loggedIn = false;
			channels = [];
			await InvokeAsync(this.StateHasChanged);
			return;
		}
		var token = result.Value;
		if (token is not null)
		{
			loggedIn = true;
			SignedToken signedToken = TokenVerification.GetTokenFromString(token);
			try
			{
				user = await messengerService.GetAccount(signedToken.UserId);
			}
			catch (KeyNotFoundException)
			{
				loggedIn = false;
				channels = [];
				await InvokeAsync(this.StateHasChanged);
				return;
			}
			channels = await messengerService.GetChannelsWithUser(user.Id, user.Id);
		}
		else
		{
			loggedIn = false;
			channels = [];
		}
		await InvokeAsync(this.StateHasChanged);
	}

	private async Task leaveChannelClick(ItemClickEventArgs e)
	{
		string channelId = e.ContextMenuTrigger.Id;
		await messengerService.RemoveUserFromChannel(Guid.Parse(channelId), user.Id, user.Id);
		if (navigationManager.Uri.EndsWith($"channel/{channelId}"))
		{
			navigationManager.NavigateTo("/");
		}
	}

	private async Task addUserClick(ItemClickEventArgs e)
	{
		string channelId = e.ContextMenuTrigger.Id;
		navigationManager.NavigateTo($"channel/{channelId}/addUser");
	}

	public void Dispose()
	{
		eventService.OnTokenChange -= tokenChangeAction;
		eventService.OnChannelListChange -= tokenChangeAction;
	}
}