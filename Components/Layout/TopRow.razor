@using CactusFrontEnd.Security
@using Messenger
@using MessengerInterfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@implements IDisposable
@inject ProtectedLocalStorage ProtectedLocalStore
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (user is null)
{
	<a href="login">Log in</a>
}
else
{
	<a id="settings" href="settings"></a>
	<a href="settings" style="color: white; text-decoration: none; padding-left: 5px;">@user.UserName</a>
	<a href="logout">Log out</a>
}


<style>
	#settings {
		width: 24px;
		height: 24px;
		position: absolute;
		left: 0;
		font-size: 30px;
		color: black;
		background: url(Images/settings.png);
		background-size: cover;
		margin-right: 5px;
	}
</style>

@code {
	private string? token;
	private Account? user = default;
	private Action tokenChangeAction;
	[Inject]
	private IMessengerService messengerService { get; set; }
	[Inject]
	private EventService eventService { get; set; }

	protected async override void OnInitialized()
	{
		await refresh();
		tokenChangeAction = async () =>
		{
			await refresh();
		};
		eventService.OnTokenChange += tokenChangeAction;
	}

	public async Task refresh()
	{
		try
		{
			var result = await ProtectedLocalStore.GetAsync<string>("AuthorizationToken");
			token = result.Value;
			if (token is not null)
			{
				try
				{
					SignedToken<AuthorizationToken> signedToken = TokenVerification.GetTokenFromString<AuthorizationToken>(token);
					user = await messengerService.GetAccount(signedToken.Token.UserId);
				}
				catch
				{
					user = null;
				}
			}
			else
			{
				user = null;
			}
		}
		catch
		{
			user = null;
		}
		await InvokeAsync(this.StateHasChanged);
	}

	public void Dispose()
	{
		eventService.OnTokenChange -= tokenChangeAction;
	}
}
